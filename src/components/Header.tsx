'use client'

import React, { useState, useEffect, useRef } from 'react';
import { Calculator, Menu, X, ChevronDown } from 'lucide-react';
import LanguageToggle from './LanguageToggle';
import { useTranslations } from 'next-intl';

const Header = () => {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [openDropdown, setOpenDropdown] = useState<string | null>(null);
  const headerRef = useRef<HTMLDivElement>(null);
  const t = useTranslations();

  const menuItems = {
    calculators: {
      title: t('navigation.financialCalculators'),
      items: [
        { href: '/', label: t('footer.links.salaryCalculator'), icon: 'üí∞' },
        { href: '/loan-calculator', label: t('footer.links.loanCalculator'), icon: 'üè¶' },
        { href: '/savings-calculator', label: t('footer.links.savingsCalculator'), icon: 'üìà' },
        { href: '/stock-calculator', label: t('footer.links.stockCalculator'), icon: 'üìä' },
        { href: '/retirement-calculator', label: t('footer.links.retirementCalculator'), icon: 'üë¥' },
        { href: '/tax-calculator', label: t('footer.links.taxCalculator'), icon: 'üìã' },
        { href: '/exchange-calculator', label: t('footer.links.exchangeCalculator'), icon: 'üí±' },
        { href: '/real-estate-calculator', label: t('footer.links.realEstateCalculator'), icon: 'üè†' },
        { href: '/car-loan-calculator', label: t('footer.links.carLoanCalculator'), icon: 'üöó' },
        { href: '/car-tax-calculator', label: t('footer.links.carTaxCalculator'), icon: 'üöò' },
        { href: '/fuel-calculator', label: t('footer.links.fuelCalculator'), icon: '‚õΩ' },
      ]
    },
    tools: {
      title: t('navigation.developmentTools'),
      items: [
        { href: '/regex-extractor', label: t('footer.links.regexExtractor'), icon: 'üîç' },
        { href: '/time-converter', label: t('footer.links.timeConverter'), icon: 'üï∞Ô∏è' },
        { href: '/json-formatter', label: t('footer.links.jsonFormatter'), icon: 'üìù' },
        { href: '/json-xml-converter', label: t('footer.links.jsonXmlConverter'), icon: 'üîÑ' },
        { href: '/json-csv-converter', label: t('footer.links.jsonCsvConverter'), icon: 'üîÑ' },
        { href: '/jwt-decoder', label: t('footer.links.jwtDecoder'), icon: 'üîê' },
        { href: '/uuid-generator', label: t('footer.links.uuidGenerator'), icon: 'üÜî' },
        { href: '/cron-tester', label: t('footer.links.cronTester'), icon: '‚è∞' },
        { href: '/qr-generator', label: t('footer.links.qrGenerator'), icon: 'üì±' },
        { href: '/barcode-generator', label: t('footer.links.barcodeGenerator'), icon: 'üìä' },
        { href: '/sql-formatter', label: t('footer.links.sqlFormatter'), icon: 'üóÑÔ∏è' },
        { href: '/markdown-viewer', label: t('footer.links.markdownViewer'), icon: 'üìñ' },
        { href: '/image-resizer', label: t('footer.links.imageResizer'), icon: 'üñºÔ∏è' },
        { href: '/image-editor', label: t('footer.links.imageEditor'), icon: 'üé®' }
      ]
    },
    health: {
      title: t('navigation.healthTools'),
      items: [
        { href: '/bmi-calculator', label: t('footer.links.bmiCalculator'), icon: '‚ù§Ô∏è' },
        { href: '/calorie-calculator', label: t('footer.links.calorieCalculator'), icon: 'üçé' },
        { href: '/body-fat-calculator', label: t('footer.links.bodyFatCalculator'), icon: 'üí™' },
        { href: '/work-hours-calculator', label: t('footer.links.workHoursCalculator'), icon: '‚è∞' }
      ]
    },
    games: {
      title: t('navigation.simpleGames'),
      items: [
        { href: '/lotto-generator', label: t('footer.links.lottoGenerator'), icon: 'üé≤' },
        { href: '/ladder-game', label: t('footer.links.ladderGame'), icon: 'ü™ú' }
      ]
    }
  };

  const handleDropdownToggle = (dropdown: string) => {
    setOpenDropdown(openDropdown === dropdown ? null : dropdown);
  };

  const closeDropdown = () => {
    setOpenDropdown(null);
  };

  // Î™®Î∞îÏùº Î©îÎâ¥ Ïó¥Î¶¥ Îïå Î∞∞Í≤Ω Ïä§ÌÅ¨Î°§ Î∞©ÏßÄ
  useEffect(() => {
    if (isMobileMenuOpen) {
      // Î©îÎâ¥ Ïó¥Î¶¥ Îïå: body Ïä§ÌÅ¨Î°§ ÎßâÍ∏∞
      document.body.style.overflow = 'hidden';
      document.body.style.position = 'fixed';
      document.body.style.top = `-${window.scrollY}px`;
      document.body.style.width = '100%';
    } else {
      // Î©îÎâ¥ Îã´Ìûê Îïå: body Ïä§ÌÅ¨Î°§ Î≥µÏõê
      const scrollY = document.body.style.top;
      document.body.style.overflow = '';
      document.body.style.position = '';
      document.body.style.top = '';
      document.body.style.width = '';
      if (scrollY) {
        window.scrollTo(0, parseInt(scrollY || '0') * -1);
      }
    }

    return () => {
      // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ïä§ÌÅ¨Î°§ Î≥µÏõê
      document.body.style.overflow = '';
      document.body.style.position = '';
      document.body.style.top = '';
      document.body.style.width = '';
    };
  }, [isMobileMenuOpen]);

  // Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú ÎìúÎ°≠Îã§Ïö¥ Îã´Í∏∞
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (headerRef.current && !headerRef.current.contains(event.target as Node)) {
        setOpenDropdown(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  return (
    <header ref={headerRef} className="bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          <div className="flex items-center space-x-2">
            <Calculator className="w-8 h-8 text-blue-600" />
            <span className="text-xl font-bold text-gray-900 dark:text-white">{t('header.title')}</span>
          </div>
          
          {/* Desktop Navigation */}
          <nav className="hidden lg:flex items-center space-x-1">
            {/* Í∏àÏúµ Í≥ÑÏÇ∞Í∏∞ ÎìúÎ°≠Îã§Ïö¥ */}
            <div className="relative">
              <button
                onClick={() => handleDropdownToggle('calculators')}
                className="flex items-center space-x-1 px-3 py-2 rounded-md text-gray-600 dark:text-gray-300 hover:text-blue-600 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
              >
                <span>{menuItems.calculators.title}</span>
                <ChevronDown className={`w-4 h-4 transition-transform ${openDropdown === 'calculators' ? 'rotate-180' : ''}`} />
              </button>
              
              {openDropdown === 'calculators' && (
                <div className="absolute top-full left-0 mt-1 w-56 bg-white dark:bg-gray-800 rounded-md shadow-lg border border-gray-200 dark:border-gray-700 py-1 z-50">
                  {menuItems.calculators.items.map((item) => (
                    <a
                      key={item.href}
                      href={item.href}
                      onClick={closeDropdown}
                      className="flex items-center space-x-3 px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 hover:text-blue-600 transition-colors"
                    >
                      <span className="text-lg">{item.icon}</span>
                      <span>{item.label}</span>
                    </a>
                  ))}
                </div>
              )}
            </div>

            {/* Í∞úÎ∞ú ÎèÑÍµ¨ ÎìúÎ°≠Îã§Ïö¥ */}
            <div className="relative">
              <button
                onClick={() => handleDropdownToggle('tools')}
                className="flex items-center space-x-1 px-3 py-2 rounded-md text-gray-600 dark:text-gray-300 hover:text-blue-600 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
              >
                <span>{menuItems.tools.title}</span>
                <ChevronDown className={`w-4 h-4 transition-transform ${openDropdown === 'tools' ? 'rotate-180' : ''}`} />
              </button>
              
              {openDropdown === 'tools' && (
                <div className="absolute top-full left-0 mt-1 w-48 bg-white dark:bg-gray-800 rounded-md shadow-lg border border-gray-200 dark:border-gray-700 py-1 z-50">
                  {menuItems.tools.items.map((item) => (
                    <a
                      key={item.href}
                      href={item.href}
                      onClick={closeDropdown}
                      className="flex items-center space-x-3 px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 hover:text-blue-600 transition-colors"
                    >
                      <span className="text-lg">{item.icon}</span>
                      <span>{item.label}</span>
                    </a>
                  ))}
                </div>
              )}
            </div>

            {/* Í±¥Í∞ï ÎèÑÍµ¨ ÎìúÎ°≠Îã§Ïö¥ */}
            <div className="relative">
              <button
                onClick={() => handleDropdownToggle('health')}
                className="flex items-center space-x-1 px-3 py-2 rounded-md text-gray-600 dark:text-gray-300 hover:text-blue-600 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
              >
                <span>{menuItems.health.title}</span>
                <ChevronDown className={`w-4 h-4 transition-transform ${openDropdown === 'health' ? 'rotate-180' : ''}`} />
              </button>
              
              {openDropdown === 'health' && (
                <div className="absolute top-full left-0 mt-1 w-48 bg-white dark:bg-gray-800 rounded-md shadow-lg border border-gray-200 dark:border-gray-700 py-1 z-50">
                  {menuItems.health.items.map((item) => (
                    <a
                      key={item.href}
                      href={item.href}
                      onClick={closeDropdown}
                      className="flex items-center space-x-3 px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 hover:text-blue-600 transition-colors"
                    >
                      <span className="text-lg">{item.icon}</span>
                      <span>{item.label}</span>
                    </a>
                  ))}
                </div>
              )}
            </div>

            {/* Í∞ÑÎã® Í≤åÏûÑ ÎìúÎ°≠Îã§Ïö¥ */}
            <div className="relative">
              <button
                onClick={() => handleDropdownToggle('games')}
                className="flex items-center space-x-1 px-3 py-2 rounded-md text-gray-600 dark:text-gray-300 hover:text-blue-600 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
              >
                <span>{menuItems.games.title}</span>
                <ChevronDown className={`w-4 h-4 transition-transform ${openDropdown === 'games' ? 'rotate-180' : ''}`} />
              </button>
              
              {openDropdown === 'games' && (
                <div className="absolute top-full left-0 mt-1 w-48 bg-white dark:bg-gray-800 rounded-md shadow-lg border border-gray-200 dark:border-gray-700 py-1 z-50">
                  {menuItems.games.items.map((item) => (
                    <a
                      key={item.href}
                      href={item.href}
                      onClick={closeDropdown}
                      className="flex items-center space-x-3 px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 hover:text-blue-600 transition-colors"
                    >
                      <span className="text-lg">{item.icon}</span>
                      <span>{item.label}</span>
                    </a>
                  ))}
                </div>
              )}
            </div>

            {/* Í∏àÏúµ ÌåÅ */}
            <a 
              href="/tips" 
              className="px-3 py-2 rounded-md text-gray-600 dark:text-gray-300 hover:text-blue-600 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
            >
              {t('navigation.financialTips')}
            </a>
            
            {/* Ïñ∏Ïñ¥ Ï†ÑÌôò */}
            <LanguageToggle />
          </nav>

          {/* Mobile: Language Toggle + Menu Button */}
          <div className="lg:hidden flex items-center space-x-2">
            <LanguageToggle />
            <button
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              className="p-2 rounded-md text-gray-600 dark:text-gray-300 hover:text-blue-600 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
            >
              {isMobileMenuOpen ? (
                <X className="w-6 h-6" />
              ) : (
                <Menu className="w-6 h-6" />
              )}
            </button>
          </div>
        </div>

        {/* Mobile Navigation */}
        {isMobileMenuOpen && (
          <div className="lg:hidden py-4 border-t border-gray-200 dark:border-gray-700 max-h-screen overflow-y-auto">
            <nav className="space-y-4">
              {/* Í∏àÏúµ Í≥ÑÏÇ∞Í∏∞ ÏÑπÏÖò */}
              <div>
                <h3 className="px-3 py-2 text-sm font-semibold text-gray-900 dark:text-white uppercase tracking-wider">
                  üí∞ {menuItems.calculators.title}
                </h3>
                <div className="space-y-1">
                  {menuItems.calculators.items.map((item) => (
                    <a
                      key={item.href}
                      href={item.href}
                      onClick={() => setIsMobileMenuOpen(false)}
                      className="flex items-center space-x-3 px-6 py-2 text-gray-600 dark:text-gray-300 hover:text-blue-600 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                    >
                      <span className="text-lg">{item.icon}</span>
                      <span>{item.label}</span>
                    </a>
                  ))}
                </div>
              </div>

              {/* Í∞úÎ∞ú ÎèÑÍµ¨ ÏÑπÏÖò */}
              <div>
                <h3 className="px-3 py-2 text-sm font-semibold text-gray-900 dark:text-white uppercase tracking-wider">
                  üõ†Ô∏è {menuItems.tools.title}
                </h3>
                <div className="space-y-1">
                  {menuItems.tools.items.map((item) => (
                    <a
                      key={item.href}
                      href={item.href}
                      onClick={() => setIsMobileMenuOpen(false)}
                      className="flex items-center space-x-3 px-6 py-2 text-gray-600 dark:text-gray-300 hover:text-blue-600 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                    >
                      <span className="text-lg">{item.icon}</span>
                      <span>{item.label}</span>
                    </a>
                  ))}
                </div>
              </div>

              {/* Í±¥Í∞ï ÎèÑÍµ¨ ÏÑπÏÖò */}
              <div>
                <h3 className="px-3 py-2 text-sm font-semibold text-gray-900 dark:text-white uppercase tracking-wider">
                  ‚ù§Ô∏è {menuItems.health.title}
                </h3>
                <div className="space-y-1">
                  {menuItems.health.items.map((item) => (
                    <a
                      key={item.href}
                      href={item.href}
                      onClick={() => setIsMobileMenuOpen(false)}
                      className="flex items-center space-x-3 px-6 py-2 text-gray-600 dark:text-gray-300 hover:text-blue-600 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                    >
                      <span className="text-lg">{item.icon}</span>
                      <span>{item.label}</span>
                    </a>
                  ))}
                </div>
              </div>

              {/* Í∞ÑÎã® Í≤åÏûÑ ÏÑπÏÖò */}
              <div>
                <h3 className="px-3 py-2 text-sm font-semibold text-gray-900 dark:text-white uppercase tracking-wider">
                  üéÆ {menuItems.games.title}
                </h3>
                <div className="space-y-1">
                  {menuItems.games.items.map((item) => (
                    <a
                      key={item.href}
                      href={item.href}
                      onClick={() => setIsMobileMenuOpen(false)}
                      className="flex items-center space-x-3 px-6 py-2 text-gray-600 dark:text-gray-300 hover:text-blue-600 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                    >
                      <span className="text-lg">{item.icon}</span>
                      <span>{item.label}</span>
                    </a>
                  ))}
                </div>
              </div>

              {/* Í∏àÏúµ ÌåÅ */}
              <div>
                <a
                  href="/tips"
                  onClick={() => setIsMobileMenuOpen(false)}
                  className="flex items-center space-x-3 px-3 py-3 text-gray-600 dark:text-gray-300 hover:text-blue-600 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg mx-3 transition-colors font-medium"
                >
                  <span className="text-lg">üí°</span>
                  <span>{t('navigation.financialTips')}</span>
                </a>
              </div>
            </nav>
          </div>
        )}
      </div>
    </header>
  );
};

export default Header;